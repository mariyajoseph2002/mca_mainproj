/* 
allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://storage.googleapis.com/download.flutter.io' }
        
    }
}

rootProject.buildDir = "../build"
subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
}
subprojects {
    project.evaluationDependsOn(":app")
}

tasks.register("clean", Delete) {
    delete rootProject.buildDir
}

buildscript {
    //ext.kotlin_version = '1.5.20'
    ext.kotlin_version = '1.9.22'
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
       
    }
    dependencies {
        //classpath 'com.android.tools.build:gradle:8.2.2'  // Use the latest version if available
        classpath 'com.android.tools.build:gradle:8.2.2'

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        classpath 'com.google.gms:google-services:4.3.15'  // Use the latest version of google-services
    }
}
 */
 // Top-level build file where you can add configuration options common to all sub-projects/modules.
allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://storage.googleapis.com/download.flutter.io' }
        maven { url 'https://jitpack.io' }  // Ensure this is included for some dependencies
    }
}
buildscript {
   // ext.kotlin_version = '1.9.22'  // Ensure this matches your Kotlin version
   ext.kotlin_version = '1.8.10'
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()  // Ensure this is included
    }
    dependencies {
        //classpath 'com.android.tools.build:gradle:8.2.2'  // Ensure it's compatible
        classpath 'com.android.tools.build:gradle:7.3.1'  
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.gms:google-services:4.3.15'  // Latest Google services plugin
    }
}



// Set build directory outside of subprojects for better structure
rootProject.buildDir = "../build"

subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
    
}
subprojects {
    project.evaluationDependsOn(":app")
    
}

// Clean task for deleting the build directory
tasks.register("clean", Delete) {
    delete rootProject.buildDir
}
